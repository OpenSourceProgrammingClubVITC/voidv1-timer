{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///home/mithil/ospc/voidv1-timer/components/HeroShader.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { UniformsUtils } from \"three\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer.js\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass.js\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\n\n// Create noise textures\nfunction createNoiseTexture(size = 512) {\n  const data = new Uint8Array(size * size * 4);\n  for (let i = 0; i < size * size * 4; i += 4) {\n    const val = Math.random() * 255;\n    data[i] = val;\n    data[i + 1] = val;\n    data[i + 2] = val;\n    data[i + 3] = 255;\n  }\n  const texture = new THREE.DataTexture(data, size, size);\n  texture.format = THREE.RGBAFormat;\n  texture.needsUpdate = true;\n  return texture;\n}\n\nconst noiseTexture = createNoiseTexture();\nconst noiseTexture2 = createNoiseTexture();\n\n// Enhanced black hole shader with improved effects\nconst blackHoleShader = {\n  uniforms: {\n    iTime: { value: 0 },\n    iResolution: { value: new THREE.Vector2(1, 1) },\n    iMouse: { value: new THREE.Vector4() },\n    iNoise1: { value: noiseTexture },\n    iNoise2: { value: noiseTexture2 },\n    enableBlackHole: { value: 1.0 },\n    parallaxOffset: { value: new THREE.Vector2(0, 0) },\n\n    // Look & feel settings\n    holeRadius: { value: 0.27 },\n    holeSoftness: { value: 0.15 },\n    centerGlowIntensity: { value: 2.5 },\n    ringRadius: { value: 0.35 },\n    ringWidth: { value: 0.3 },\n    vignetteRadius: { value: 1.2 },\n    vignetteSoftness: { value: 0.68 },\n    noiseScale: { value: 3.8 },\n    noiseIntensity: { value: 1.0 },\n    noiseSpeed: { value: 0.33 },\n    noiseDetail: { value: 2.0 },\n    noiseOffset: { value: 0.0 },\n    noiseRotation: { value: 0.0 },\n\n    // Purple theme colors\n    holeColor: { value: new THREE.Vector3(0.55, 0.25, 0.9) },      // Purple\n    ringColor: { value: new THREE.Vector3(0.65, 0.35, 0.95) },     // Lighter purple\n    glowColor: { value: new THREE.Vector3(0.85, 0.55, 1.0) },      // Brightest purple\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform float iTime;\n    uniform vec2 iResolution;\n    uniform vec4 iMouse;\n    uniform sampler2D iNoise1;\n    uniform sampler2D iNoise2;\n    varying vec2 vUv;\n    \n    uniform float enableBlackHole;\n    uniform vec2 parallaxOffset;\n\n    // Configurable uniforms\n    uniform float holeRadius;\n    uniform float holeSoftness;\n    uniform float centerGlowIntensity;\n    uniform float ringRadius;\n    uniform float ringWidth;\n    uniform float vignetteRadius;\n    uniform float vignetteSoftness;\n    uniform float noiseScale;\n    uniform float noiseIntensity;\n    uniform float noiseSpeed;\n    uniform float noiseDetail;\n    uniform float noiseOffset;\n    uniform float noiseRotation;\n\n    // Color uniforms\n    uniform vec3 holeColor;\n    uniform vec3 ringColor;\n    uniform vec3 glowColor;\n\n    // Improved hash function\n    float hash21(vec2 p) {\n      p = fract(p * vec2(123.34, 456.21));\n      p += dot(p, p + 19.19);\n      return fract(p.x * p.y);\n    }\n\n    // Improved noise function with subtle rotation\n    float noise(vec2 p) {\n      float angle = noiseRotation;\n      mat2 rot = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n      p = rot * p;\n      \n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      \n      vec2 u = f * f * (3.0 - 2.0 * f);\n      float offset = noiseOffset;\n      \n      float a = hash21(i + vec2(0.0, 0.0) + offset);\n      float b = hash21(i + vec2(1.0, 0.0) + offset);\n      float c = hash21(i + vec2(0.0, 1.0) + offset);\n      float d = hash21(i + vec2(1.0, 1.0) + offset);\n      \n      return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n    }\n\n    // FBM (Fractal Brownian Motion) for more natural patterns\n    float fbm(vec2 p) {\n      float f = 0.0;\n      float w = 0.5;\n      float sum = 0.0;\n      \n      for(int i = 0; i < 8; i++) {\n        if (i >= int(noiseDetail)) break;\n        \n        float octaveAngle = float(i) * 0.1;\n        mat2 rot = mat2(cos(octaveAngle), sin(octaveAngle), -sin(octaveAngle), cos(octaveAngle));\n        \n        f += w * noise(p);\n        sum += w;\n        w *= 0.5;\n        p = rot * p * 2.0;\n      }\n      \n      return f / sum;\n    }\n\n    void main() {\n      // Get the aspect ratio\n      float aspect = iResolution.x / iResolution.y;\n      \n      // Calculate UV coordinates\n      vec2 uv = vUv;\n      \n      // Center point\n      vec2 center = vec2(0.5, 0.5);\n      \n      // Calculate distance from center for circular elements\n      vec2 circleUV = uv - center;\n      if (aspect > 1.0) {\n        circleUV.x *= aspect;\n      } else {\n        circleUV.y /= aspect;\n      }\n      float dist = length(circleUV);\n      \n      // For the noise pattern, use raw UV coordinates\n      vec2 noiseUV = uv \n        + (1.0 - enableBlackHole) * (vec2(0.0, iTime * 0.04) + parallaxOffset);\n      \n      // Time variables\n      float t = iTime * noiseSpeed;\n      \n      // Create dynamic distortion\n      vec2 p = (noiseUV - 0.5) * noiseScale;\n      \n      // Apply rotation\n      float angle = t * 0.2;\n      mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n      p = rot * p;\n      \n      // Add flowing effect from the black hole\n      vec2 rv = p / (length(p * 2.5) * (p * 30.0 + sin(t * 0.2) * 5.0));\n      \n      // Generate base pattern\n      float val = 0.5 * fbm(p * 2.0 + fbm(p + vec2(t * 0.1, t * -0.05)) * 5.0);\n      \n      // Apply counter-rotation for more movement\n      p = rot * p * 0.7;\n      \n      // Add more detail\n      float pattern = val + 0.5 * fbm(p * val * 8.0 + t * 0.1);\n      \n      // Enhance contrast\n      pattern = pow(pattern, 0.8) * noiseIntensity;\n      \n      // Create bright center with pulsing\n      float centerGlow = 1.0 - smoothstep(0.0, 0.6, dist);\n      centerGlow = pow(centerGlow, 1.2) * (centerGlowIntensity + sin(t * 1.2) * 0.5);\n      \n      // Create accretion disk with dynamic thickness\n      float ringWidthDynamic = ringWidth + sin(t * 1.5) * 0.05;\n      float ringRadiusDynamic = ringRadius + sin(t * 0.7) * 0.05;\n      float ringMask = smoothstep(ringRadiusDynamic - ringWidthDynamic, ringRadiusDynamic, dist) * \n                       smoothstep(ringRadiusDynamic + ringWidthDynamic, ringRadiusDynamic, dist);\n      \n      // Add noise to the ring\n      ringMask *= 1.0 + pattern * 0.5;\n      \n      // Create black hole center\n      float holeRadiusDynamic = holeRadius + sin(t * 0.5) * 0.02;\n      float holeMask = smoothstep(holeRadiusDynamic - holeSoftness, holeRadiusDynamic + holeSoftness, dist);\n      \n      // Add noise to hole edge\n      holeMask = mix(holeMask, holeMask * (1.0 + pattern * 0.5 - 0.25), 0.7);\n      \n      // Create the main color\n      float brightness = pattern * 0.6;\n      \n      // Apply colors to different components\n      vec3 noiseColor = holeColor * brightness;\n      vec3 ringComponent = ringColor * ringMask * 0.4;\n      vec3 glowComponent = glowColor * centerGlow * 0.2;\n      \n      // Toggle black hole contributions\n      ringComponent *= enableBlackHole;\n      glowComponent *= enableBlackHole;\n      \n      // Combine components\n      vec3 finalColor = noiseColor + ringComponent + glowComponent;\n      \n      // Apply hole mask\n      holeMask = mix(1.0, holeMask, enableBlackHole);\n      finalColor *= holeMask;\n      \n      // Create vignette for blending\n      float vignette = smoothstep(vignetteRadius, vignetteRadius - vignetteSoftness, dist + pattern * 0.1);\n      \n      // Apply vignette to brightness\n      finalColor *= vignette;\n      \n      gl_FragColor = vec4(finalColor, 1.0);\n    }\n  `,\n};\n\n// Film grain shader for added texture\nconst filmGrainShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    time: { value: 0.0 },\n    intensity: { value: 0.065 },\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform float time;\n    uniform float intensity;\n    varying vec2 vUv;\n\n    float gaussian(float z, float u, float o) {\n      return (1.0 / (o * sqrt(2.0 * 3.1415))) * exp(-(((z - u) * (z - u)) / (2.0 * (o * o))));\n    }\n\n    void main() {\n      vec4 color = texture2D(tDiffuse, vUv);\n      float seed = dot(vUv, vec2(12.9898, 78.233));\n      float noise = fract(sin(seed) * 43758.5453 + time * 2.0);\n      noise = gaussian(noise, 0.0, 0.5 * 0.5);\n      vec3 grain = vec3(noise) * (1.0 - color.rgb);\n      color.rgb += grain * intensity;\n      gl_FragColor = color;\n    }\n  `,\n};\n\ntype HeroShaderProps = {\n  enableBlackHole?: boolean;\n  position?: \"fixed\" | \"absolute\";\n  parallax?: { x: number; y: number };\n};\n\nexport default function HeroShader({ \n  enableBlackHole = true, \n  position = \"fixed\", \n  parallax = { x: 0, y: 0 } \n}: HeroShaderProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const uniformsRef = useRef<Record<string, THREE.IUniform> | null>(null);\n  const mouse = useRef(new THREE.Vector2(0.5, 0.5));\n  const smoothedMouse = useRef(new THREE.Vector2(0.5, 0.5));\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n\n    // Track mouse for interactive effects (window-based coords, smoothed)\n    const handleMouseMove = (event: MouseEvent) => {\n      const mouseX = event.clientX / window.innerWidth;\n      const mouseY = 1.0 - event.clientY / window.innerHeight; // flip Y\n      mouse.current.set(mouseX, mouseY);\n    };\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', handleMouseMove);\n    }\n\n    // Use powerPreference for better performance\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    const renderer = new THREE.WebGLRenderer({ \n      antialias: !isMobile, \n      alpha: true,\n      powerPreference: \"high-performance\",\n      precision: isMobile ? \"mediump\" : \"highp\"\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, isMobile ? 1.5 : 2));\n    renderer.domElement.style.position = \"absolute\";\n    renderer.domElement.style.top = \"0\";\n    renderer.domElement.style.left = \"0\";\n    renderer.domElement.style.width = \"100%\";\n    renderer.domElement.style.height = \"100%\";\n    renderer.domElement.style.pointerEvents = \"none\";\n    container.appendChild(renderer.domElement);\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n\n    // Clone uniforms per instance\n    const uniforms = UniformsUtils.clone(blackHoleShader.uniforms) as Record<string, THREE.IUniform>;\n    uniforms.enableBlackHole.value = enableBlackHole ? 1.0 : 0.0;\n    uniforms.parallaxOffset.value.set(parallax.x, parallax.y);\n    uniformsRef.current = uniforms;\n\n    // Create the quad with our shader\n    const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader: blackHoleShader.vertexShader,\n        fragmentShader: blackHoleShader.fragmentShader,\n        transparent: false,\n        depthWrite: false,\n      });\n    const quad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), shaderMaterial);\n    quad.position.z = -1;\n    scene.add(quad);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    \n    // Add bloom for stronger glow effects\n    const bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(width, height),\n      0.22,  // Stronger bloom for more vibrant effect\n      0.4,\n      0.9\n    );\n    \n    if (isMobile) {\n      bloomPass.resolution = new THREE.Vector2(width * 0.5, height * 0.5);\n    }\n    composer.addPass(bloomPass);\n    \n    const filmPass = new ShaderPass(filmGrainShader);\n    composer.addPass(filmPass);\n\n    // Initial uniforms\n    uniforms.iResolution.value.set(width, height);\n\n    // Animation with smooth mouse and app-ready dispatch\n    let rafId = 0;\n    let frames = 0;\n    const wrappedAnimate = (t: number) => {\n      // time in seconds like the provided snippet\n      const timeSec = t * 0.001;\n      uniforms.iTime.value = timeSec;\n      filmPass.uniforms.time.value = timeSec;\n\n      // Smooth out mouse (lower factor = smoother)\n      smoothedMouse.current.lerp(mouse.current, 0.1);\n      const sx = smoothedMouse.current.x * (typeof window !== 'undefined' ? window.innerWidth : width);\n      const sy = smoothedMouse.current.y * (typeof window !== 'undefined' ? window.innerHeight : height);\n      // Update both a dedicated uniform (if used elsewhere) and iMouse for the shader\n      if (!('smoothedMouse' in uniforms)) {\n        uniforms['smoothedMouse'] = { value: new THREE.Vector2(sx, sy) } as THREE.IUniform;\n      } else {\n        (uniforms['smoothedMouse'].value as THREE.Vector2).set(sx, sy);\n      }\n      uniforms.iMouse.value.x = sx;\n      uniforms.iMouse.value.y = sy;\n\n      composer.render();\n\n      frames++;\n      if (frames === 2 && typeof window !== 'undefined') {\n        try {\n          const evt = new CustomEvent('app-ready', { detail: { source: 'hero' } });\n          window.dispatchEvent(evt);\n        } catch {}\n      }\n      rafId = requestAnimationFrame(wrappedAnimate);\n    };\n    wrappedAnimate(0);\n\n    // Handle resize\n    const onResize = () => {\n      if (!container) return;\n      const w = container.clientWidth;\n      const h = container.clientHeight;\n      renderer.setSize(w, h);\n      composer.setSize(w, h);\n      uniforms.iResolution.value.set(w, h);\n    };\n    const ro = new ResizeObserver(onResize);\n    ro.observe(container);\n\n    return () => {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', handleMouseMove);\n      }\n      cancelAnimationFrame(rafId);\n      ro.disconnect();\n      composer.dispose();\n      renderer.dispose();\n      container.removeChild(renderer.domElement);\n    };\n  }, [enableBlackHole, parallax.x, parallax.y]);\n\n  // Update parallax when prop changes\n  useEffect(() => {\n    if (uniformsRef.current) {\n      uniformsRef.current.parallaxOffset.value.set(parallax.x, parallax.y);\n    }\n  }, [parallax.x, parallax.y]);\n\n  const wrapperClass = position === \"fixed\" ? \"fixed inset-0 -z-10\" : \"absolute inset-0 -z-10\";\n  return <div ref={containerRef} className={wrapperClass} />;\n}"],"names":[],"mappings":";;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;;;;;AAUA,wBAAwB;AACxB,SAAS,mBAAmB,OAAO,GAAG;IACpC,MAAM,OAAO,IAAI,WAAW,OAAO,OAAO;IAC1C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,OAAO,GAAG,KAAK,EAAG;QAC3C,MAAM,MAAM,KAAK,MAAM,KAAK;QAC5B,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,IAAI,EAAE,GAAG;QACd,IAAI,CAAC,IAAI,EAAE,GAAG;QACd,IAAI,CAAC,IAAI,EAAE,GAAG;IAChB;IACA,MAAM,UAAU,IAAI,MAAM,WAAW,CAAC,MAAM,MAAM;IAClD,QAAQ,MAAM,GAAG,MAAM,UAAU;IACjC,QAAQ,WAAW,GAAG;IACtB,OAAO;AACT;AAEA,MAAM,eAAe;AACrB,MAAM,gBAAgB;AAEtB,mDAAmD;AACnD,MAAM,kBAAkB;IACtB,UAAU;QACR,OAAO;YAAE,OAAO;QAAE;QAClB,aAAa;YAAE,OAAO,IAAI,MAAM,OAAO,CAAC,GAAG;QAAG;QAC9C,QAAQ;YAAE,OAAO,IAAI,MAAM,OAAO;QAAG;QACrC,SAAS;YAAE,OAAO;QAAa;QAC/B,SAAS;YAAE,OAAO;QAAc;QAChC,iBAAiB;YAAE,OAAO;QAAI;QAC9B,gBAAgB;YAAE,OAAO,IAAI,MAAM,OAAO,CAAC,GAAG;QAAG;QAEjD,uBAAuB;QACvB,YAAY;YAAE,OAAO;QAAK;QAC1B,cAAc;YAAE,OAAO;QAAK;QAC5B,qBAAqB;YAAE,OAAO;QAAI;QAClC,YAAY;YAAE,OAAO;QAAK;QAC1B,WAAW;YAAE,OAAO;QAAI;QACxB,gBAAgB;YAAE,OAAO;QAAI;QAC7B,kBAAkB;YAAE,OAAO;QAAK;QAChC,YAAY;YAAE,OAAO;QAAI;QACzB,gBAAgB;YAAE,OAAO;QAAI;QAC7B,YAAY;YAAE,OAAO;QAAK;QAC1B,aAAa;YAAE,OAAO;QAAI;QAC1B,aAAa;YAAE,OAAO;QAAI;QAC1B,eAAe;YAAE,OAAO;QAAI;QAE5B,sBAAsB;QACtB,WAAW;YAAE,OAAO,IAAI,MAAM,OAAO,CAAC,MAAM,MAAM;QAAK;QACvD,WAAW;YAAE,OAAO,IAAI,MAAM,OAAO,CAAC,MAAM,MAAM;QAAM;QACxD,WAAW;YAAE,OAAO,IAAI,MAAM,OAAO,CAAC,MAAM,MAAM;QAAK;IACzD;IACA,cAAc,CAAC;;;;;;EAMf,CAAC;IACD,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+KjB,CAAC;AACH;AAEA,sCAAsC;AACtC,MAAM,kBAAkB;IACtB,UAAU;QACR,UAAU;YAAE,OAAO;QAAK;QACxB,MAAM;YAAE,OAAO;QAAI;QACnB,WAAW;YAAE,OAAO;QAAM;IAC5B;IACA,cAAc,CAAC;;;;;;EAMf,CAAC;IACD,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;EAmBjB,CAAC;AACH;AAQe,SAAS,WAAW,EACjC,kBAAkB,IAAI,EACtB,WAAW,OAAO,EAClB,WAAW;IAAE,GAAG;IAAG,GAAG;AAAE,CAAC,EACT;IAChB,MAAM,eAAe,IAAA,+MAAM,EAAwB;IACnD,MAAM,cAAc,IAAA,+MAAM,EAAwC;IAClE,MAAM,QAAQ,IAAA,+MAAM,EAAC,IAAI,MAAM,OAAO,CAAC,KAAK;IAC5C,MAAM,gBAAgB,IAAA,+MAAM,EAAC,IAAI,MAAM,OAAO,CAAC,KAAK;IAEpD,IAAA,kNAAS,EAAC;QACR,IAAI,CAAC,aAAa,OAAO,EAAE;QAE3B,MAAM,YAAY,aAAa,OAAO;QACtC,MAAM,QAAQ,UAAU,WAAW;QACnC,MAAM,SAAS,UAAU,YAAY;QAErC,sEAAsE;QACtE,MAAM,kBAAkB,CAAC;YACvB,MAAM,SAAS,MAAM,OAAO,GAAG,OAAO,UAAU;YAChD,MAAM,SAAS,MAAM,MAAM,OAAO,GAAG,OAAO,WAAW,EAAE,SAAS;YAClE,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ;QAC5B;QACA;;QAIA,6CAA6C;QAC7C,MAAM,WAAW,4BAA4B,IAAI,CAAC,UAAU,SAAS;QACrE,MAAM,WAAW,IAAI,MAAM,aAAa,CAAC;YACvC,WAAW,CAAC;YACZ,OAAO;YACP,iBAAiB;YACjB,WAAW,WAAW,YAAY;QACpC;QACA,SAAS,OAAO,CAAC,OAAO;QACxB,SAAS,aAAa,CAAC,KAAK,GAAG,CAAC,OAAO,gBAAgB,IAAI,GAAG,WAAW,MAAM;QAC/E,SAAS,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG;QACrC,SAAS,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG;QAChC,SAAS,UAAU,CAAC,KAAK,CAAC,IAAI,GAAG;QACjC,SAAS,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG;QAClC,SAAS,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG;QACnC,SAAS,UAAU,CAAC,KAAK,CAAC,aAAa,GAAG;QAC1C,UAAU,WAAW,CAAC,SAAS,UAAU;QAEzC,cAAc;QACd,MAAM,QAAQ,IAAI,MAAM,KAAK;QAC7B,MAAM,SAAS,IAAI,MAAM,kBAAkB,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK;QAC/D,OAAO,QAAQ,CAAC,CAAC,GAAG;QAEpB,8BAA8B;QAC9B,MAAM,WAAW,cAAc,KAAK,CAAC,gBAAgB,QAAQ;QAC7D,SAAS,eAAe,CAAC,KAAK,GAAG,kBAAkB,MAAM;QACzD,SAAS,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC;QACxD,YAAY,OAAO,GAAG;QAEtB,kCAAkC;QAClC,MAAM,iBAAiB,IAAI,MAAM,cAAc,CAAC;YAC5C;YACA,cAAc,gBAAgB,YAAY;YAC1C,gBAAgB,gBAAgB,cAAc;YAC9C,aAAa;YACb,YAAY;QACd;QACF,MAAM,OAAO,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,aAAa,CAAC,GAAG,IAAI;QAC3D,KAAK,QAAQ,CAAC,CAAC,GAAG,CAAC;QACnB,MAAM,GAAG,CAAC;QAEV,wBAAwB;QACxB,MAAM,WAAW,IAAI,eAAe;QACpC,SAAS,OAAO,CAAC,IAAI,WAAW,OAAO;QAEvC,sCAAsC;QACtC,MAAM,YAAY,IAAI,gBACpB,IAAI,MAAM,OAAO,CAAC,OAAO,SACzB,MACA,KACA;QAGF,IAAI,UAAU;YACZ,UAAU,UAAU,GAAG,IAAI,MAAM,OAAO,CAAC,QAAQ,KAAK,SAAS;QACjE;QACA,SAAS,OAAO,CAAC;QAEjB,MAAM,WAAW,IAAI,WAAW;QAChC,SAAS,OAAO,CAAC;QAEjB,mBAAmB;QACnB,SAAS,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO;QAEtC,qDAAqD;QACrD,IAAI,QAAQ;QACZ,IAAI,SAAS;QACb,MAAM,iBAAiB,CAAC;YACtB,4CAA4C;YAC5C,MAAM,UAAU,IAAI;YACpB,SAAS,KAAK,CAAC,KAAK,GAAG;YACvB,SAAS,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG;YAE/B,6CAA6C;YAC7C,cAAc,OAAO,CAAC,IAAI,CAAC,MAAM,OAAO,EAAE;YAC1C,MAAM,KAAK,cAAc,OAAO,CAAC,CAAC,GAAG,CAAC,sCAAgC,0BAAoB,KAAK;YAC/F,MAAM,KAAK,cAAc,OAAO,CAAC,CAAC,GAAG,CAAC,sCAAgC,0BAAqB,MAAM;YACjG,gFAAgF;YAChF,IAAI,CAAC,CAAC,mBAAmB,QAAQ,GAAG;gBAClC,QAAQ,CAAC,gBAAgB,GAAG;oBAAE,OAAO,IAAI,MAAM,OAAO,CAAC,IAAI;gBAAI;YACjE,OAAO;gBACJ,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAmB,GAAG,CAAC,IAAI;YAC7D;YACA,SAAS,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG;YAC1B,SAAS,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG;YAE1B,SAAS,MAAM;YAEf;YACA;;YAMA,QAAQ,sBAAsB;QAChC;QACA,eAAe;QAEf,gBAAgB;QAChB,MAAM,WAAW;YACf,IAAI,CAAC,WAAW;YAChB,MAAM,IAAI,UAAU,WAAW;YAC/B,MAAM,IAAI,UAAU,YAAY;YAChC,SAAS,OAAO,CAAC,GAAG;YACpB,SAAS,OAAO,CAAC,GAAG;YACpB,SAAS,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;QACpC;QACA,MAAM,KAAK,IAAI,eAAe;QAC9B,GAAG,OAAO,CAAC;QAEX,OAAO;YACL;;YAGA,qBAAqB;YACrB,GAAG,UAAU;YACb,SAAS,OAAO;YAChB,SAAS,OAAO;YAChB,UAAU,WAAW,CAAC,SAAS,UAAU;QAC3C;IACF,GAAG;QAAC;QAAiB,SAAS,CAAC;QAAE,SAAS,CAAC;KAAC;IAE5C,oCAAoC;IACpC,IAAA,kNAAS,EAAC;QACR,IAAI,YAAY,OAAO,EAAE;YACvB,YAAY,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC;QACrE;IACF,GAAG;QAAC,SAAS,CAAC;QAAE,SAAS,CAAC;KAAC;IAE3B,MAAM,eAAe,aAAa,UAAU,wBAAwB;IACpE,qBAAO,8OAAC;QAAI,KAAK;QAAc,WAAW;;;;;;AAC5C","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///home/mithil/ospc/voidv1-timer/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useRef } from \"react\";\nimport { motion, useScroll, useTransform } from \"framer-motion\";\nimport Image from \"next/image\";\nimport HeroShader from \"@/components/HeroShader\";\n\nexport default function HeroSection() {\n  const sectionRef = useRef<HTMLDivElement | null>(null);\n\n  // Scroll-driven shrink effect for the hero band\n  const { scrollYProgress } = useScroll({\n    target: sectionRef,\n    offset: [\"start start\", \"end start\"],\n  });\n  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.85]);\n  const inverseScale = useTransform(scale, (v) => 1 / v);\n  const radius = useTransform(scrollYProgress, [0, 0.5], [\"0px\", \"40px\"]);\n\n  return (\n    <motion.div\n      ref={sectionRef}\n      className=\"relative w-full min-h-[100svh] flex items-center justify-center overflow-hidden\"\n      style={{ scale, borderRadius: radius }}\n    >\n      {/* Black hole strictly inside hero */}\n      <div className=\"absolute inset-0 z-[-1]\">\n        <HeroShader enableBlackHole position=\"absolute\" />\n      </div>\n\n      {/* Hero content */}\n      <motion.div \n        className=\"relative z-20 text-center px-4 sm:px-6 mt-0 sm:mt-[20vh] w-full max-w-[90vw] sm:max-w-[80vw] mx-auto\" \n        style={{ \n          scale: inverseScale,\n          marginTop: \"clamp(18vh, calc(env(safe-area-inset-top, 0px) + 20vh), 32vh)\"\n        }}\n      >\n        <h2 className=\"text-xs sm:text-sm tracking-[0.2em] uppercase text-white/70 font-mono mb-2 sm:mb-4\">Embrace the unknown</h2>\n        <div className=\"flex justify-center mt-2 sm:mt-4 md:mt-8\">\n          <Image\n            src=\"/text.png\"\n            alt=\"VOID\"\n            width={520}\n            height={160}\n            className=\"w-[220px] sm:w-[320px] md:w-[440px] lg:w-[520px] max-w-[92vw] h-auto object-contain\"\n            priority\n          />\n        </div>\n        <h2 className=\"text-xs sm:text-sm tracking-[0.2em] uppercase text-white/70 font-mono mt-2 sm:mt-4\">Trust the process</h2>\n\n        \n      </motion.div>\n    </motion.div>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;;;;;;AAEA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,aAAa,IAAA,+MAAM,EAAwB;IAEjD,gDAAgD;IAChD,MAAM,EAAE,eAAe,EAAE,GAAG,UAAU;QACpC,QAAQ;QACR,QAAQ;YAAC;YAAe;SAAY;IACtC;IACA,MAAM,QAAQ,aAAa,iBAAiB;QAAC;QAAG;KAAI,EAAE;QAAC;QAAG;KAAK;IAC/D,MAAM,eAAe,aAAa,OAAO,CAAC,IAAM,IAAI;IACpD,MAAM,SAAS,aAAa,iBAAiB;QAAC;QAAG;KAAI,EAAE;QAAC;QAAO;KAAO;IAEtE,qBACE,8OAAC,OAAO,GAAG;QACT,KAAK;QACL,WAAU;QACV,OAAO;YAAE;YAAO,cAAc;QAAO;;0BAGrC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,oIAAU;oBAAC,eAAe;oBAAC,UAAS;;;;;;;;;;;0BAIvC,8OAAC,OAAO,GAAG;gBACT,WAAU;gBACV,OAAO;oBACL,OAAO;oBACP,WAAW;gBACb;;kCAEA,8OAAC;wBAAG,WAAU;kCAAqF;;;;;;kCACnG,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,wIAAK;4BACJ,KAAI;4BACJ,KAAI;4BACJ,OAAO;4BACP,QAAQ;4BACR,WAAU;4BACV,QAAQ;;;;;;;;;;;kCAGZ,8OAAC;wBAAG,WAAU;kCAAqF;;;;;;;;;;;;;;;;;;AAM3G","debugId":null}}]
}